{"version":3,"file":"bellhop.js","sources":["../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../src/BellhopEventDispatcher.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/superPropBase.js","../node_modules/@babel/runtime/helpers/get.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../src/Bellhop.js"],"sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","/**\n * Function with a added priority type\n * @typedef {Function} PriorityFunction\n * @property {number} _priority\n */\n\n/**\n * Generic event dispatcher\n * @class  BellhopEventDispatcher\n */\nexport class BellhopEventDispatcher {\n  /**\n   *  The collection of event listeners\n   *  @property {Object} _listeners\n   *  @private\n   */\n  constructor() {\n    this._listeners = {};\n  }\n\n  /**\n   *  Add an event listener to listen to an event from either the parent or iframe\n   *  @method on\n   *  @param {String} name The name of the event to listen\n   *  @param {PriorityFunction} callback The handler when an event is triggered\n   *  @param {number} [priority=0] The priority of the event listener. Higher numbers are handled first.\n   */\n  on(name, callback, priority = 0) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    callback._priority = parseInt(priority) || 0;\n\n    // If callback is already set to this event\n    if (-1 !== this._listeners[name].indexOf(callback)) {\n      return;\n    }\n\n    this._listeners[name].push(callback);\n\n    if (this._listeners[name].length > 1) {\n      this._listeners[name].sort(this.listenerSorter);\n    }\n  }\n\n  /**\n   * @private\n   * @param {PriorityFunction} a\n   * @param {PriorityFunction} b\n   * @returns {number};\n   *  Sorts listeners added by .on() by priority\n   */\n  listenerSorter(a, b) {\n    return a._priority - b._priority;\n  }\n\n  /**\n   *  Remove an event listener\n   *  @method off\n   *  @param {String} name The name of event to listen for. If undefined, remove all listeners.\n   *  @param {Function} [callback] The optional handler when an event is triggered, if no callback\n   *         is set then all listeners by type are removed\n   */\n  off(name, callback) {\n    if (this._listeners[name] === undefined) {\n      return;\n    }\n\n    if (callback === undefined) {\n      delete this._listeners[name];\n      return;\n    }\n\n    const index = this._listeners[name].indexOf(callback);\n\n    -1 < index ? this._listeners[name].splice(index, 1) : undefined;\n  }\n\n  /**\n   *  Trigger any event handlers for an event type\n   *  @method trigger\n   *  @param {object | String} event The event to send\n   *  @param {object} [data = {}] optional data to send to other areas in the app that are listening for this event\n   */\n  trigger(event, data = {}) {\n    if (typeof event == 'string') {\n      event = {\n        type: event,\n        data: 'object' === typeof data && null !== data ? data : {}\n      };\n    }\n\n    if ('undefined' !== typeof this._listeners[event.type]) {\n      for (let i = this._listeners[event.type].length - 1; i >= 0; i--) {\n        this._listeners[event.type][i](event);\n      }\n    }\n  }\n\n  /**\n   * Reset the listeners object\n   * @method  destroy\n   */\n  destroy() {\n    this._listeners = {};\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","import { BellhopEventDispatcher } from './BellhopEventDispatcher.js';\n\n/**\n *  Abstract communication layer between the iframe\n *  and the parent DOM\n *  @class Bellhop\n *  @extends BellhopEventDispatcher\n */\nexport class Bellhop extends BellhopEventDispatcher {\n  /**\n   * Creates an instance of Bellhop.\n   * @memberof Bellhop\n   * @param { string | number } id the id of the Bellhop instance\n   */\n  constructor(id = (Math.random() * 100) | 0) {\n    super();\n\n    /**\n     *  The instance ID for bellhop\n     *  @property {string} id\n     */\n    this.id = `BELLHOP:${id}`;\n    /**\n     *  If we are connected to another instance of bellhop\n     *  @property {Boolean} connected\n     *  @readOnly\n     *  @default false\n     *  @private\n     */\n    this.connected = false;\n\n    /**\n     *  If this instance represents an iframe instance\n     *  @property {Boolean} isChild\n     *  @private\n     *  @default true\n     */\n    this.isChild = true;\n\n    /**\n     *  If we are currently trying to connect\n     *  @property {Boolean} connecting\n     *  @default false\n     *  @private\n     */\n    this.connecting = false;\n\n    /**\n     * If debug mode is turned on\n     *  @property {Boolean} debug\n     *  @default false\n     *  @private\n     */\n    this.debug = false;\n\n    /**\n     *  If using cross-domain, the domain to post to\n     *  @property {string} origin\n     *  @private\n     *  @default \"*\"\n     */\n    this.origin = '*';\n\n    /**\n     *  Save any sends to wait until after we're done\n     *  @property {Array} _sendLater\n     *  @private\n     */\n    this._sendLater = [];\n\n    /**\n     * The iframe element\n     * @property {HTMLIFrameElement} iframe\n     * @private\n     * @readOnly\n     */\n    this.iframe = null;\n\n    /**\n     * The bound receive function\n     * @property {Function} receive\n     * @private\n     */\n    this.receive = this.receive.bind(this);\n\n  }\n\n  /**\n   *  The connection has been established successfully\n   *  @event connected\n   */\n\n  /**\n   *  Connection could not be established\n   *  @event failed\n   */\n\n  /**\n   *  Handle messages in the window\n   *  @method receive\n   *  @param { MessageEvent } message the post message received from another bellhop instance\n   *  @private\n   */\n  receive(message) {\n    // Ignore messages that don't originate from the target\n    // we're connected to\n    if (this.target !== message.source) {\n      return;\n    }\n\n    this.logDebugMessage(true, message);\n\n    // If this is not the initial connection message\n    if (message.data !== 'connected') {\n      let data = message.data;\n      // Check to see if the data was sent as a stringified json\n      if ('string' === typeof data) {\n        try {\n          data = JSON.parse(data);\n        } catch (err) {\n          console.error('Bellhop error: ', err);\n        }\n      }\n      if (this.connected && 'object' === typeof data && data.type) {\n\n        this.trigger(data);\n      }\n      return;\n    }\n    // Else setup the connection\n    this.onConnectionReceived(message.data);\n  }\n  /**\n   * @memberof Bellhop\n   * @param {object} message the message received from the other bellhop instance\n   * @private\n   */\n  onConnectionReceived(message) {\n    this.connecting = false;\n    this.connected = true;\n\n    // Be polite and respond to the child that we're ready\n    if (!this.isChild) {\n      this.target.postMessage(message, this.origin);\n    }\n\n    // If we have any sends waiting to send\n    // we are now connected and it should be okay\n    for (let i = 0; i < this._sendLater.length; i++) {\n      const { type, data } = this._sendLater[i];\n      this.send(type, data);\n    }\n    this._sendLater.length = 0;\n\n    // If there is a connection event assigned call it\n    this.trigger('connected');\n  }\n\n  /**\n   *  Setup the connection\n   *  @method connect\n   *  @param {HTMLIFrameElement} iframe The iframe to communicate with. If no value is set, the assumption\n   *         is that we're the child trying to communcate with our window.parent\n   *  @param {String} [origin=\"*\"] The domain to communicate with if different from the current.\n   *  @return {Bellhop} Return instance of current object\n   */\n  connect(iframe, origin = '*') {\n    // Ignore if we're already trying to connect\n    if (this.connecting) {\n      return;\n    }\n\n    // Disconnect from any existing connection\n    this.disconnect();\n\n    // We are trying to connect\n    this.connecting = true;\n\n    // The iframe if we're the parent\n    if (iframe instanceof HTMLIFrameElement) {\n      this.iframe = iframe;\n    }\n\n    // The instance of bellhop is inside the iframe\n    this.isChild = iframe === undefined;\n\n    this.supported = true;\n    if (this.isChild) {\n      // for child pages, the window passed must be a different window\n      this.supported = window != iframe;\n    }\n\n    this.origin = origin;\n\n    window.addEventListener('message', this.receive);\n\n    if (this.isChild) {\n      // No parent, can't connect\n      if (window === this.target) {\n        this.trigger('failed');\n      } else {\n        // If connect is called after the window is ready\n        // we can go ahead and send the connect message\n        this.target.postMessage('connected', this.origin);\n      }\n    }\n  }\n\n  /**\n   *  Disconnect if there are any open connections\n   *  @method disconnect\n   */\n  disconnect() {\n    this.connected = false;\n    this.connecting = false;\n    this.origin = null;\n    this.iframe = null;\n    this.isChild = true;\n    this._sendLater.length = 0;\n\n    window.removeEventListener('message', this.receive);\n  }\n\n  /**\n   *  Send an event to the connected instance\n   *  @method send\n   *  @param {string} type name/type of the event\n   *  @param {*} [data = {}] Additional data to send along with event\n   */\n  send(type, data = {}) {\n    if (typeof type !== 'string') {\n      throw 'The event type must be a string';\n    }\n\n    const message = {\n      type,\n      data\n    };\n\n    this.logDebugMessage(false, message);\n\n    if (this.connecting) {\n      this._sendLater.push(message);\n    } else {\n      this.target.postMessage(JSON.stringify(message), this.origin);\n    }\n  }\n\n  /**\n   *  A convenience method for sending and listening to create\n   *  a singular link for fetching data. This is the same as calling send\n   *  and then getting a response right away with the same event.\n   *  @method fetch\n   *  @param {String} event The name of the event\n   *  @param {Function} callback The callback to call after, takes event object as one argument\n   *  @param {Object} [data = {}] Optional data to pass along\n   *  @param {Boolean} [runOnce=false] If we only want to fetch once and then remove the listener\n   */\n  fetch(event, callback, data = {}, runOnce = false) {\n    if (!this.connecting && !this.connected) {\n      throw 'No connection, please call connect() first';\n    }\n\n    const internalCallback = e => {\n      if (runOnce) {\n        this.off(e.type, internalCallback);\n      }\n\n      callback(e);\n    };\n\n    this.on(event, internalCallback);\n    this.send(event, data);\n  }\n\n  /**\n   *  A convience method for listening to an event and then responding with some data\n   *  right away. Automatically removes the listener\n   *  @method respond\n   *  @param {String} event The name of the event\n   *  @param {Object | function | Promise | string} [data = {}] The object to pass back.\n   *  \tMay also be a function; the return value will be sent as data in this case.\n   *  @param {Boolean} [runOnce=false] If we only want to respond once and then remove the listener\n   *\n   */\n  respond(event, data = {}, runOnce = false) {\n    const bellhop = this; //'this' for use inside async function\n    /**\n     * @ignore\n     */\n    const internalCallback = async function (event) {\n      if (runOnce) {\n        bellhop.off(event, internalCallback);\n      }\n      if (typeof data === 'function') {\n        data = data();\n      }\n      const newData = await data;\n      bellhop.send(event.type, newData);\n    };\n    this.on(event, internalCallback);\n  }\n\n  /**\n   * Send either the default log message or the callback provided if debug\n   * is enabled\n   * @method logDebugMessage\n   */\n  logDebugMessage(received = false, message) {\n    if (this.debug && typeof this.debug === 'function') {\n      this.debug({ isChild: this.isChild, received: false, message: message });\n    } else if (this.debug) {\n      console.log(`Bellhop Instance (${this.isChild ? 'Child' : 'Parent'}) ${received ? 'Receieved' : 'Sent'}`, message);\n    }\n  }\n\n  /**\n   *  Destroy and don't user after this\n   *  @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.disconnect();\n    this._sendLater.length = 0;\n  }\n\n  /**\n   *\n   * Returns the correct parent element for Bellhop's context\n   * @readonly\n   * @memberof Bellhop\n   */\n  get target() {\n    return this.isChild ? window.parent : this.iframe.contentWindow;\n  }\n}\n"],"names":["_typeof","obj","Symbol","iterator","module","constructor","prototype","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","BellhopEventDispatcher","_listeners","name","callback","priority","this","_priority","parseInt","indexOf","push","sort","listenerSorter","a","b","undefined","index","splice","event","data","type","runtime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","value","makeInvokeMethod","fn","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","asyncGeneratorStep","gen","_next","_throw","args","arguments","apply","ReferenceError","assertThisInitialized","_getPrototypeOf","o","property","_get","receiver","Reflect","get","base","superPropBase","desc","getOwnPropertyDescriptor","_setPrototypeOf","p","subClass","superClass","Bellhop","id","Math","random","connected","isChild","connecting","debug","origin","_sendLater","iframe","receive","_this","bind","message","source","logDebugMessage","onConnectionReceived","JSON","parse","console","trigger","postMessage","send","disconnect","HTMLIFrameElement","supported","window","addEventListener","removeEventListener","stringify","runOnce","internalCallback","e","_this2","off","on","bellhop","newData","received","log","parent","contentWindow"],"mappings":"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"}
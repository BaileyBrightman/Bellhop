let _createClass = (function() {
  function e(e, t) {
    for (let n = 0; n < t.length; n++) {
      let i = t[n];
      (i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(e, i.key, i);
    }
  }
  return function(t, n, i) {
    return n && e(t.prototype, n), i && e(t, i), t;
  };
})();
function _classCallCheck(e, t) {
  if (!(e instanceof t)) {
    throw new TypeError('Cannot call a class as a function');
  }
}
let BellhopEventDispatcher = (function() {
    function e() {
      _classCallCheck(this, e), (this._listeners = {});
    }
    return (
      _createClass(e, [
        {
          key: 'on',
          value: function(e, t, n) {
            if ('string' != typeof e) {
              for (let i in e) {
                this.on(i, e[i], n);
              }
            } else {
              for (let r = e.split(' '), s = 0, o = r.length; s < o; s++) {
                let l = r[s];
                this._listeners[l] || (this._listeners[l] = []),
                (t._priority = parseInt(n) || 0),
                -1 === this._listeners[l].indexOf(t) &&
                    (this._listeners[l].push(t),
                    this._listeners[l].length > 1 &&
                      this._listeners[l].sort(this.listenerSorter));
              }
            }
          }
        },
        {
          key: 'listenerSorter',
          value: function(e, t) {
            return e._priority - t._priority;
          }
        },
        {
          key: 'off',
          value: function(e, t) {
            if (void 0 === e || !this._listeners) {
              return (this._listeners = {}), this;
            }
            if (void 0 === this._listeners[e]) {
              return this;
            }
            if (void 0 === t) {
              delete this._listeners[e];
            } else {
              for (let n = 0, i = this._listeners[e].length; n < i; n++) {
                if (this._listeners[e][n] === t) {
                  this._listeners[e].splice(n, 1);
                  break;
                }
              }
            }
          }
        },
        {
          key: 'trigger',
          value: function(e) {
            if (
              ('string' == typeof e && (e = { type: e }),
              void 0 !== this._listeners[e.type])
            ) {
              for (let t = this._listeners[e.type].length - 1; t >= 0; t--) {
                this._listeners[e.type][t](e);
              }
            }
          }
        },
        {
          key: 'destroy',
          value: function() {
            this._listeners = null;
          }
        }
      ]),
      e
    );
  })(),
  _typeof =
    'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
      ? function(e) {
        return typeof e;
      }
      : function(e) {
        return e &&
            'function' == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
          ? 'symbol'
          : typeof e;
      },
  _createClass$1 = (function() {
    function e(e, t) {
      for (let n = 0; n < t.length; n++) {
        let i = t[n];
        (i.enumerable = i.enumerable || !1),
        (i.configurable = !0),
        'value' in i && (i.writable = !0),
        Object.defineProperty(e, i.key, i);
      }
    }
    return function(t, n, i) {
      return n && e(t.prototype, n), i && e(t, i), t;
    };
  })(),
  _get = function e(t, n, i) {
    null === t && (t = Function.prototype);
    let r = Object.getOwnPropertyDescriptor(t, n);
    if (void 0 === r) {
      let s = Object.getPrototypeOf(t);
      return null === s ? void 0 : e(s, n, i);
    }
    if ('value' in r) {
      return r.value;
    }
    let o = r.get;
    return void 0 !== o ? o.call(i) : void 0;
  };
function _classCallCheck$1(e, t) {
  if (!(e instanceof t)) {
    throw new TypeError('Cannot call a class as a function');
  }
}
function _possibleConstructorReturn(e, t) {
  if (!e) {
    throw new ReferenceError(
      'this hasn\'t been initialised - super() hasn\'t been called'
    );
  }
  return !t || ('object' != typeof t && 'function' != typeof t) ? e : t;
}
function _inherits(e, t) {
  if ('function' != typeof t && null !== t) {
    throw new TypeError(
      'Super expression must either be null or a function, not ' + typeof t
    );
  }
  (e.prototype = Object.create(t && t.prototype, {
    constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 }
  })),
  t &&
      (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : (e.__proto__ = t));
}
let Bellhop = (function(e) {
  function t() {
    _classCallCheck$1(this, t);
    let e = _possibleConstructorReturn(
      this,
      (t.__proto__ || Object.getPrototypeOf(t)).call(this)
    );
    return (
      (e.connected = !1),
      (e.name = ''),
      (e.isChild = !0),
      (e.connecting = !1),
      (e.origin = '*'),
      (e._sendLater = []),
      (e.iframe = null),
      e
    );
  }
  return (
    _inherits(t, BellhopEventDispatcher),
    _createClass$1(t, [
      {
        key: 'receive',
        value: function(e) {
          if ((console.log(e), this.getTarget === e.source)) {
            console.log('did make it passed');
            let t = e.data;
            if ('connected' === t) {
              (this.connecting = !1),
              (this.connected = !0),
              this.trigger('connected'),
              this.isChild || this.getTarget.postMessage(t, this.origin);
              let n = this._sendLater.length;
              if (n > 0) {
                for (let i = 0; i < n; i++) {
                  let r = this._sendLater[i];
                  this.send(r.data);
                }
                this._sendLater.length = 0;
              }
            } else {
              if (!this.connected) {
                return;
              }
              'object' === (void 0 === t ? 'undefined' : _typeof(t)) &&
                t.type &&
                this.trigger(t);
            }
          }
        }
      },
      {
        key: 'connect',
        value: function(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : '*';
          this.connecting ||
            (this.disconnect(),
            (this.connecting = !0),
            this._sendLater || (this._sendLater = []),
            (this.iframe = e || null),
            (this.isChild = void 0 === e),
            (this.origin = t),
            window.addEventListener('message', this.receive.bind(this)),
            this.isChild &&
              (window === this.getTarget
                ? this.trigger('failed')
                : this.getTarget.postMessage('connected', this.origin)));
        }
      },
      {
        key: 'disconnect',
        value: function() {
          (this.connected = !1),
          (this.connecting = !1),
          (this.origin = null),
          (this.iframe = null),
          (this.isChild = !0),
          this._sendLater && (this._sendLater.length = 0),
          window.removeEventListener('message', this.receive);
        }
      },
      {
        key: 'send',
        value: function(e) {
          if (this.connecting) {
            this._sendLater.push(e);
          } else {
            if (!this.connected) {
              return;
            }
            this.getTarget.postMessage(e, this.origin);
          }
        }
      },
      {
        key: 'fetch',
        value: function(e, t, n, i) {
          let r = this;
          if (!this.connecting && !this.connected) {
            throw 'No connection, please call connect() first';
          }
          i = void 0 !== i && i;
          this.on(e, function e(n) {
            i && r.off(n.type, e), t(n);
          }),
          this.send(n);
        }
      },
      {
        key: 'respond',
        value: function(e, t) {
          let n = this,
            i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          this.on(e, function e(r) {
            i && n.off(r.type, e), n.send(t);
          });
        }
      },
      {
        key: 'destroy',
        value: function() {
          _get(
            t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
            'destroy',
            this
          ).call(this),
          this.disconnect(),
          (this._sendLater = null);
        }
      },
      {
        key: 'getTarget',
        get: function() {
          return this.isChild ? window.parent : this.iframe.contentWindow;
        }
      }
    ]),
    t
  );
})();
export { Bellhop, BellhopEventDispatcher };
//# sourceMappingURL=bellhop.min.js.map
